{"version":3,"sources":["webpack://api_recetas/./src/js/http-provider.js","webpack://api_recetas/./src/js/renderizar-html.js","webpack://api_recetas/./src/js/paginacion.js","webpack://api_recetas/./src/index.js"],"names":["main","document","querySelector","resultadosBusqueda","getElementById","input","paginacionHTML","pagina","numeroPaginas","paginacion","async","paginaActual","from","to","datosApi","parametro","resp","fetch","ok","console","log","json","error","conexionAPI","value","Math","ceil","count","recetas","classList","remove","resultadosDibujados","forEach","receta","recipe","label","url","floor","calories","dietLabels","length","innerHTML","renderizarHTML","hits","btnPrev","btnNext","btnEnd","btnStart","totalPaginas","addEventListener","evento","preventDefault","disabled"],"mappings":"mBACA,MCAMA,EAAqBC,SAASC,cAAe,QAC7CC,EAAqBF,SAASG,eAAgB,sBCG9CC,EAAiBJ,SAASG,eAAgB,SAC1CE,EAAiBL,SAASG,eAAgB,cAC1CG,EAAiBN,SAASG,eAAgB,UAGhD,IAAII,EACJ,MAEaC,EAAaC,MAASC,IAC/B,GAAIA,EAAe,GAAKA,EAAeH,EACnC,OAEJ,IAAII,EANmB,GAMLD,EANK,GAOnBE,EAAYD,EAPO,GASvB,MAAME,OFZiBJ,OAAOK,EAAWH,EAAMC,KAE/C,IACI,MAAMG,QAAaC,MAAO,mCAAYF,mEAA2DH,QAAaC,KAO9G,OANKG,EAAKE,IACNC,QAAQC,IAAK,2CAGGJ,EAAKK,OAG3B,MAAQC,GACN,MAAK,IEAcC,CAAalB,EAAMmB,MAAOZ,EAAMC,GAQvD,OAPAL,EAAgBiB,KAAKC,KAAMZ,EAASa,MAVb,IAYrBnB,EAAgB,KAASA,EAAgB,IDlBjB,CAAEoB,IAC5B5B,EAAK6B,UAAUC,OAAQ,WACvB,IAAIC,EAAsB,GAC1BH,EAAQI,SAAWC,IACfF,GAAuB,oEACmBE,EAAOC,OAAa,MAAMD,EAAOC,OAAa,MAAI,4IAErDD,EAAOC,OAAOC,gEACTF,EAAOC,OAAOE,8KAESH,EAAOC,OAAgB,SAAMT,KAAKY,MAAOJ,EAAOC,OAAOI,UAAc,iGACvEL,EAAOC,OAAOK,WAAWC,OAAS,EAAQP,EAAOC,OAAkB,WAAI,0FAC/ED,EAAOC,OAAgB,SAAMD,EAAOC,OAAgB,SAAI,sEAGrH/B,EAAmBsC,UAAYV,GCI/BW,CAAgB5B,EAAS6B,MACzBrC,EAAeuB,UAAUC,OAAQ,UACjCvB,EAAOkC,UAAY,WAAY9B,QAAqBH,IAE7CA,GCrBL,EAAiBP,SAASC,cAAe,QACzC0C,EAAiB3C,SAASG,eAAgB,YAC1CyC,EAAiB5C,SAASG,eAAgB,YAC1C0C,EAAiB7C,SAASG,eAAgB,WAC1C2C,EAAiB9C,SAASG,eAAgB,aAGhD,IACI4C,EADArC,EAAuB,EAK3B,EAAKsC,iBAAkB,UAAUvC,MAAQwC,IACrCA,EAAOC,iBACPH,QAAqBvC,EAAYE,MAErCkC,EAAQI,iBAAkB,SAAS,KAE/BJ,EAAQO,UAAW,EAEnBzC,IACAF,EAAaE,GACbkC,EAAQO,UAAW,KAGvBR,EAAQK,iBAAkB,SAAS,KAE/BL,EAAQQ,UAAW,EAEnBzC,IACAF,EAAYE,GACZiC,EAAQQ,UAAW,KAEvBL,EAASE,iBAAkB,SAAS,KAChCF,EAASK,UAAW,EACpBzC,EAAoB,EACpBF,EAAYE,GACZoC,EAASK,UAAW,KAExBN,EAAOG,iBAAkB,SAAS,KAC9BH,EAAOM,UAAW,EAClBzC,EAAkBqC,EAClBvC,EAAYE,GACZmC,EAAOM,UAAW,M","file":"bundle.bf232e8e303166feef9c.js","sourcesContent":["//Datos conexión a la API\r\nconst APP_ID  = '7a328566';\r\nconst APP_key = '64edbabeddb76780a2625fea7e1e7c34';\r\nconst API     = 'https://api.edamam.com/search?q=' \r\n\r\n\r\n\r\n//Conexión a la API\r\nexport const conexionAPI = async( parametro, from, to ) => {\r\n\r\n    try {\r\n        const resp = await fetch( `${ API }${ parametro }&app_id=${ APP_ID }&app_key=${ APP_key}&from=${ from }&to=${ to }` );\r\n        if( !resp.ok ) {\r\n            console.log( 'Ha habido un fallo en la conexión' );\r\n        }\r\n        //const { hits: recetas } = await resp.json( );\r\n        const datos = await resp.json();\r\n        //return recetas;   \r\n        return datos;\r\n    } catch ( error ) {\r\n        throw( error )\r\n    }\r\n}","//Seleccionamos elementos del HTML\r\nconst main               = document.querySelector( 'main' );\r\nconst resultadosBusqueda = document.getElementById( 'resultado-busqueda' );\r\n\r\n\r\nexport const renderizarHTML = ( recetas ) => {\r\n    main.classList.remove( 'inicial' );\r\n    let resultadosDibujados = [];\r\n    recetas.forEach( ( receta ) => {\r\n        resultadosDibujados += `<div class=\"item\">\r\n                                    <img src=${ ( receta.recipe.image ) ? ( receta.recipe.image ) : ( './img/Error.jpg' )} alt=\"\">\r\n                                    <div class=\"flex-container\">\r\n                                        <h2>${ receta.recipe.label }</h2>\r\n                                        <a href=\"${ receta.recipe.url }\" target=\"_blanck\" class=\"btn-receta\">Ver receta</a>\r\n                                    </div>\r\n                                    <p class=\"datos-receta\">Calorias: ${ ( receta.recipe.calories ) ? ( Math.floor( receta.recipe.calories) ) : ( 'No hay información' ) }</p>\r\n                                    <p class=\"datos-receta\">Dietas: ${ ( receta.recipe.dietLabels.length > 0 ) ? ( receta.recipe.dietLabels ) : ( 'No hay información ') }</p>\r\n                                    <p class=\"datos-receta\">${ ( receta.recipe.mealType ) ? ( receta.recipe.mealType ) : ( 'No hay información' ) }</p>\r\n                                </div>` \r\n    });\r\n    resultadosBusqueda.innerHTML = resultadosDibujados;    \r\n}","//Importamos las funciones que se necesitan para que funcione la aplicación\r\nimport { conexionAPI } from './http-provider';\r\nimport { renderizarHTML } from './renderizar-html';\r\n\r\n//Elementos del DOM\r\nconst input          = document.getElementById( 'input' );\r\nconst paginacionHTML = document.getElementById( 'paginacion' );\r\nconst pagina         = document.getElementById( 'pagina' );\r\n\r\n//Variables para la lógica\r\nlet numeroPaginas;\r\nconst elementosPorPagina = 10;\r\n\r\nexport const paginacion = async (  paginaActual ) => {\r\n    if( paginaActual < 1 || paginaActual > numeroPaginas ){\r\n        return\r\n    }\r\n    let from      = ( paginaActual * elementosPorPagina ) - elementosPorPagina; \r\n    let to        = from + elementosPorPagina;\r\n\r\n    const datosApi = await conexionAPI( input.value, from, to );\r\n    numeroPaginas = Math.ceil( datosApi.count / elementosPorPagina );\r\n    //La API solo deja mostrar 100 resultados\r\n    ( numeroPaginas > 10 ) ? ( numeroPaginas = 10 ) : ( numeroPaginas )\r\n    renderizarHTML( datosApi.hits );\r\n    paginacionHTML.classList.remove( 'hidden' );\r\n    pagina.innerHTML = `Página: ${ paginaActual } de ${ numeroPaginas }`;\r\n    \r\n    return numeroPaginas;\r\n}","//Importamos el css desde la carpeta donde se encuentra\r\nimport './css/style.css';\r\n\r\n//Importamos las funciones que se necesitan para que funcione la aplicación\r\nimport { paginacion } from './js/paginacion';\r\n\r\n//Elementos del DOM\r\nconst form           = document.querySelector( 'form' );\r\nconst btnPrev        = document.getElementById( 'btn-prev' );\r\nconst btnNext        = document.getElementById( 'btn-next' );\r\nconst btnEnd         = document.getElementById( 'btn-end' );\r\nconst btnStart       = document.getElementById( 'btn-start' );\r\n\r\n//Variables para la paginación\r\nlet paginaActual         = 1;\r\nlet totalPaginas;\r\n\r\n\r\n//--------------------- EVENTOS ---------------------\r\nform.addEventListener( 'submit', async ( evento ) => {\r\n    evento.preventDefault();    \r\n    totalPaginas = await paginacion( paginaActual );\r\n})\r\nbtnNext.addEventListener( 'click', () => {\r\n    //Deshabilitamos el botón para que el usuario no haga click más de una vez\r\n    btnNext.disabled = true;\r\n    //Cuando avanzamos página queremos sumar una página más a paginaActual\r\n    paginaActual++;\r\n    paginacion(  paginaActual );\r\n    btnNext.disabled = false;\r\n\r\n})\r\nbtnPrev.addEventListener( 'click', () => {\r\n    //Deshabilitamos el botón para que el usuario no haga click más de una vez\r\n    btnPrev.disabled = true;\r\n    //Cuando retrocedemos una página queremos restar una página a paginaActual\r\n    paginaActual--;\r\n    paginacion( paginaActual );\r\n    btnPrev.disabled = false;\r\n})\r\nbtnStart.addEventListener( 'click', () => {\r\n    btnStart.disabled = true;\r\n    paginaActual      = 1;\r\n    paginacion( paginaActual );\r\n    btnStart.disabled = false;\r\n})\r\nbtnEnd.addEventListener( 'click', () => {\r\n    btnEnd.disabled = true;\r\n    paginaActual    = totalPaginas;\r\n    paginacion( paginaActual );\r\n    btnEnd.disabled = false;\r\n})"],"sourceRoot":""}